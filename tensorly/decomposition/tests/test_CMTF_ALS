import unittest
import tensorly as tl
# import tensorly.random
import cmtf_als
import numpy as np


class MyTestCase(unittest.TestCase):
    I = 50
    J = 50
    K = 50
    M = 50
    R = 3

    eta = 0.1

    A = np.random.randn(I, R)
    B = np.random.randn(J, R)
    C = np.random.randn(K, R)
    V = np.random.randn(M, R)

    N_tens = np.random.randn(I, J, K)
    N = np.random.randn(I, M)

    # A, B, C, V = tl.random.random_kruskal((I, J, K, M), R).factors
    # N_tens = tl.kruskal_to_tensor(tl.random.random_kruskal((I, J, K), R))
    # N = tl.kruskal_to_tensor(tl.random.random_kruskal((I, M), R))

    X_ = tl.kruskal_tensor.kruskal_to_tensor([None, [A, B, C]])  # weights are None
    X = X_ + eta * N_tens * tl.norm(X_) / tl.norm(N_tens)
    Y_ = A @ V.T
    Y = Y_ + eta * N * tl.norm(Y_) / tl.norm(N)
    n = 0

    def test_factor_match_score_3d(self):
        # same factors
        self.assertAlmostEqual(1, cmtf_als.factor_match_score_3d(self.A, self.B, self.C, self.V, self.A, self.B, self.C,
                                                                 self.V))
        # with permutation
        self.assertAlmostEqual(1,
                               cmtf_als.factor_match_score_3d(tl.tensor([[4, 1], [0, 2]]), tl.tensor([[0, 1], [3, 5]]),
                                                              tl.tensor([[1, 1], [1, 2]]), tl.tensor([[1, 1], [1, 2]]),
                                                              tl.tensor([[1, 4], [2, 0]]), tl.tensor([[1, 0], [5, 3]]),
                                                              tl.tensor([[1, 1], [2, 1]]), tl.tensor([[1, 1], [2, 1]])))

    def test_rescale_to_unit_frobenius(self):
        tensor = tl.tensor([[1, 2], [3, 4]])
        normalized = cmtf_als.rescale_to_unit_frobenius(tensor)
        true_normalized = tl.tensor([[1 / tl.sqrt(10), 2 / tl.sqrt(20)], [3 / tl.sqrt(10), 4 / tl.sqrt(20)]])
        self.assertEqual(normalized.tolist(), true_normalized.tolist())

    def test_solve_ls(self):
        A = tl.tensor([[1, 0], [0, 1]])
        B = tl.tensor([[1, 2], [3, 4]])
        X_hat = cmtf_als.solve_ls(A, B)
        X_true = B
        self.assertEqual(X_hat.tolist(), X_true.tolist())

    def test_calculate_f(self):
        self.assertEqual(cmtf_als.calculate_f(self.X_, self.Y_, self.A, self.B, self.C, self.V), 0)

    def test_cmtf_als_for_third_order_tensor(self):
        A_hat, B_hat, C_hat, V_hat = cmtf_als.cmtf_als_for_third_order_tensor(self.X, self.Y, self.R)
        self.assertGreater(cmtf_als.factor_match_score_3d(self.A, self.B, self.C, self.V, A_hat, B_hat, C_hat, V_hat),
                           0.99 ** 4)
        A = tl.tensor([[1, 2], [3, 4]])
        B = tl.tensor([[1, 0], [0, 2]])
        C = tl.tensor([[2, 0], [0, 1]])
        V = tl.tensor([[2, 0], [0, 1]])
        R = 2
        X = tl.kruskal_to_tensor([None, [A, B, C]])  # weights are None
        Y = A @ V.T
        A_hat, B_hat, C_hat, V_hat = cmtf_als.cmtf_als_for_third_order_tensor(X, Y, R)
        self.assertGreater(cmtf_als.factor_match_score_3d(A, B, C, V, A_hat, B_hat, C_hat, V_hat),
                           0.99 ** 4)


if __name__ == '__main__':
    unittest.main()
import unittest
import tensorly as tl
# import tensorly.random
import cmtf_als
import numpy as np


class MyTestCase(unittest.TestCase):
    I = 50
    J = 50
    K = 50
    M = 50
    R = 3

    eta = 0.1

    A = np.random.randn(I, R)
    B = np.random.randn(J, R)
    C = np.random.randn(K, R)
    V = np.random.randn(M, R)
    A = cmtf_als.rescale_to_unit_frobenius(A)
    B = cmtf_als.rescale_to_unit_frobenius(B)
    C = cmtf_als.rescale_to_unit_frobenius(C)
    V = cmtf_als.rescale_to_unit_frobenius(V)

    N_tens = np.random.randn(I, J, K)
    N = np.random.randn(I, M)

    # A, B, C, V = tl.random.random_kruskal((I, J, K, M), R).factors
    # N_tens = tl.kruskal_to_tensor(tl.random.random_kruskal((I, J, K), R))
    # N = tl.kruskal_to_tensor(tl.random.random_kruskal((I, M), R))

    X_ = tl.kruskal_tensor.kruskal_to_tensor([None, [A, B, C]])  # weights are None
    X = X_ + eta * N_tens * tl.norm(X_) / tl.norm(N_tens)
    Y_ = A @ V.T
    Y = Y_ + eta * N * tl.norm(Y_) / tl.norm(N)
    n = 0

    def test_factor_match_score_3d(self):
        # same factors
        self.assertAlmostEqual(1, cmtf_als.factor_match_score_3d(self.A, self.B, self.C, self.V, self.A, self.B, self.C,
                                                                 self.V))
        # with permutation
        self.assertAlmostEqual(1,
                               cmtf_als.factor_match_score_3d(tl.tensor([[4, 1], [0, 2]]), tl.tensor([[0, 1], [3, 5]]),
                                                              tl.tensor([[1, 1], [1, 2]]), tl.tensor([[1, 1], [1, 2]]),
                                                              tl.tensor([[1, 4], [2, 0]]), tl.tensor([[1, 0], [5, 3]]),
                                                              tl.tensor([[1, 1], [2, 1]]), tl.tensor([[1, 1], [2, 1]])))

    def test_rescale_to_unit_frobenius(self):
        tensor = tl.tensor([[1, 2], [3, 4]])
        normalized = cmtf_als.rescale_to_unit_frobenius(tensor)
        true_normalized = tl.tensor([[1 / tl.sqrt(10), 2 / tl.sqrt(20)], [3 / tl.sqrt(10), 4 / tl.sqrt(20)]])
        self.assertEqual(normalized.tolist(), true_normalized.tolist())

    def test_solve_ls(self):
        A = tl.tensor([[1, 0], [0, 1]])
        B = tl.tensor([[1, 2], [3, 4]])
        X_hat = cmtf_als.solve_ls(A, B)
        X_true = B
        self.assertEqual(X_hat.tolist(), X_true.tolist())

    def test_calculate_f(self):
        self.assertEqual(cmtf_als.calculate_f(self.X_, self.Y_, self.A, self.B, self.C, self.V), 0)

    def test_cmtf_als_for_third_order_tensor(self):
        A_hat, B_hat, C_hat, V_hat = cmtf_als.cmtf_als_for_third_order_tensor(self.X, self.Y, self.R)
        self.assertGreater(cmtf_als.factor_match_score_3d(self.A, self.B, self.C, self.V, A_hat, B_hat, C_hat, V_hat),
                           0.99 ** 4)
        A = tl.tensor([[1, 2], [3, 4]])
        B = tl.tensor([[1, 0], [0, 2]])
        C = tl.tensor([[2, 0], [0, 1]])
        V = tl.tensor([[2, 0], [0, 1]])
        R = 2
        X = tl.kruskal_to_tensor([None, [A, B, C]])  # weights are None
        Y = A @ V.T
        A_hat, B_hat, C_hat, V_hat = cmtf_als.cmtf_als_for_third_order_tensor(X, Y, R)
        self.assertGreater(cmtf_als.factor_match_score_3d(A, B, C, V, A_hat, B_hat, C_hat, V_hat),
                           0.99 ** 4)


if __name__ == '__main__':
    unittest.main()
